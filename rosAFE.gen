#pragma require "bass-genom3 >= 1.0"
#include "bassInterface.gen"
#include "rosAFEInterface.gen"

component rosAFE {
    version         "1.0";
    lang            "c";
    email	    "musabini@isir.upmc.fr";
    require         "genom3 >= 2.99.26";
    uses            bassInterface;
    provides        rosAFEInterface;

    native inputProcessors;
    native preProcessors;
    native flagMap;

    ids {
	rosAFE::infos infos;

	inputProcessors inputProcessorsSt;
	preProcessors preProcessorsSt;

	flagMap flagMapSt;
	flagMap newDataMapSt;
    };

    exception e_noData, e_noMemory, e_existsAlready, e_noUpperDependencie;

    task init {
	codel <start> initIDS(out ::ids) yield ether;
    };    

    task input {
	period      250ms;
    };

    task preProc {
        period      250ms;
    };

    activity InputProc(
      in unsigned long nFramesPerBlock = 12000 : "Blocks size in frames",
      in unsigned long bufferSize_s = 10 : "Buffer size in seconds",
      in string name = "input" : "The name of this activity"
      ) {
        doc         "Get consecutive blocks of audio data from bass";
        task        input;
        interrupts  InputProc;  // Only one audio input can be exist simultaneously (mono or stereo)
	validate    existsAlreadyInput ( local in name, in inputProcessorsSt );

        codel <start>   startInputProc( in name, in nFramesPerBlock, in bufferSize_s, inout inputProcessorsSt,
                            port in Audio, port out TDSPorts, out infos) yield waitExec;
	
	// The state Machine, start
        codel <waitExec>    	waitExecInputProc( in nFramesPerBlock, port in Audio ) yield pause::waitExec, exec, stop;
        codel <exec>    	execInputProc( in name, in inputProcessorsSt ) yield waitRelease, stop;
        codel <waitRelease>    	waitReleaseInputProc( in name, inout flagMapSt ) yield pause::waitRelease, release, stop;
        codel <release>    	releaseInputProc( in name, inout inputProcessorsSt, out newDataMapSt, port out TDSPorts) yield pause::waitExec, stop;
	// The state Machine, end

        codel <stop>    	stopInputProc( in name, port inout TDSPorts, inout inputProcessorsSt, inout flagMapSt, inout newDataMapSt ) yield ether;

        throw   e_noData, e_noMemory, e_existsAlready;
    };

    activity PreProc (
      in string name = "preProc1" : "The name of this preProc",
      in string upperDepName = "input" : "The name of the upper dependencie",
      in unsigned long fsOut = 44100 : "fsOut",
      in float bRemoveDC =  0 : "bRemoveDC",
      in float cutoffHzDC =  20 : "cutoffHzDC",
      in float bPreEmphasis =  0 : "bPreEmphasis",
      in float coefPreEmphasis =  0.97 : "coefPreEmphasis",
      in float bNormalizeRMS =  0 : "bNormalizeRMS",
      in float bBinauralRMS =  1 : "bBinauralRMS",
      in float intTimeSecRMS =  500E-3 : "intTimeSecRMS",
      in float bLevelScaling =  0 : "bLevelScaling",
      in float refSPLdB =  100 : "refSPLdB",
      in float bMiddleEarFiltering =  0 : "bMiddleEarFiltering",
      in string middleEarModel =  "jespen" : "middleEarModel",
      in float bUnityComp =  1 : "bUnityComp"
      ) {
        doc         "preProc";
        task        preProc;
	validate    existsAlreadyPreProc ( in name, in upperDepName, in inputProcessorsSt, in preProcessorsSt );

        codel <start>   	startPreProc( in name, in upperDepName, in fsOut, inout preProcessorsSt, inout flagMapSt, inout newDataMapSt, in inputProcessorsSt, port out TDSPorts, in infos, /* Arguments Of processor*/ local in bRemoveDC, local in cutoffHzDC, local in bPreEmphasis, local in coefPreEmphasis, local in bNormalizeRMS, local in bBinauralRMS, local in intTimeSecRMS, local in bLevelScaling, local in refSPLdB, local in bMiddleEarFiltering, local in middleEarModel, local in bUnityComp
	) yield waitExec, stop;
	
	// The state Machine, start
        codel <waitExec>    	waitExecPreProc ( in name, in upperDepName, inout newDataMapSt ) yield pause::waitExec, exec, ether, delete;
        codel <exec>    	execPreProc ( in name, in upperDepName, inout preProcessorsSt, out flagMapSt ) yield waitRelease;
        codel <waitRelease>    	waitReleasePreProc ( in name, inout flagMapSt ) yield pause::waitRelease, release, stop;
        codel <release>    	releasePreProc ( in name, inout preProcessorsSt, out newDataMapSt, port out TDSPorts ) yield pause::waitExec, stop;
	// The state Machine, end

        codel <delete>    	deletePreProc( in name, inout preProcessorsSt, port out TDSPorts ) yield ether;
        codel <stop>    	stopPreProc( inout preProcessorsSt ) yield ether;

        throw   e_noUpperDependencie, e_existsAlready;
    };

    function RemoveProcessor (
	in string name = "name" : "The name of the processor to delete"
	) {
	doc         "Removes the flags of this processor";

	codel removeProcessor(in name, inout flagMapSt, inout newDataMapSt );
    };

    function Stop() {
        doc         "Stop all";
        interrupts  InputProc, PreProc;
    };
};
