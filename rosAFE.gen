#pragma require "bass-genom3 >= 1.0"
#include "bassInterface.gen"
#include "rosAFEInterface.gen"

component rosAFE {
    version         "1.0";
    lang            "c";
    email	    "musabini@isir.upmc.fr";
    require         "genom3 >= 2.99.26";
    uses            bassInterface;
    provides        rosAFEInterface;

    native inputProcessors;
    native preProcessors;
    native gammatoneProcessors;
    native flagMap;

    ids {
	rosAFE::infos infos;

	inputProcessors inputProcessorsSt;
	preProcessors preProcessorsSt;
	gammatoneProcessors gammatoneProcessorsSt;

	flagMap flagMapSt;
	flagMap newDataMapSt;
    };

    exception e_noData, e_noMemory, e_existsAlready, e_noSuchProcessor, e_noSuchParameter, e_noUpperDependencie;

    task init {
	codel <start> initIDS(out ::ids) yield ether;
    };    

    task input {
	period      250ms;
    };

    task preProc {
        period      50ms;
    };

    task gammatoneProc {
        period      50ms;
    };

    activity InputProc(
      in string name = "input" : "The name of this activity",
      in unsigned long nFramesPerBlock = 12000 : "Blocks size in frames",
      in unsigned long bufferSize_s = 10 : "Buffer size in seconds"
      ) {
        doc         "Get consecutive blocks of audio data from bass and normalizes that data";
        task        input;
        interrupts  InputProc;  // Only one audio input can exist simultaneously

        codel <start>   	startInputProc( in name, in nFramesPerBlock, in bufferSize_s, inout inputProcessorsSt,
                            		port in Audio, port out TDSPorts, out infos) yield waitExec;
	
	// The state Machine, start
        codel <waitExec>    	waitExecInputProc( in nFramesPerBlock, port in Audio ) yield pause::waitExec, exec, stop;
        codel <exec>    	execInputProc( in name, in inputProcessorsSt ) yield waitRelease, stop;
        codel <waitRelease>    	waitRelease( in name, inout flagMapSt ) yield pause::waitRelease, release, stop;
        codel <release>    	releaseInputProc( in name, inout inputProcessorsSt, out newDataMapSt, port out TDSPorts) yield pause::waitExec, stop;
	// The state Machine, end

        codel <stop>    	stopInputProc( in name, port inout TDSPorts, inout inputProcessorsSt, inout flagMapSt, inout newDataMapSt ) yield ether;

        throw   e_noData, e_noMemory, e_existsAlready;
    };

    activity PreProc (
      in string name = "preProc1" : "The name of this preProc",
      in string upperDepName = "input" : "The name of the upper dependencie",
      in unsigned long fsOut = 44100 : "fsOut",
      in unsigned short bRemoveDC =  0 : "'Flag to activate DC-removal filter",
      in float cutoffHzDC =  20 : "Cutoff frequency (Hz) of DC-removal high-pass filter",
      in unsigned short bPreEmphasis =  0 : "Flag to activate the pre-emphasis high-pass filter",
      in float coefPreEmphasis =  0.97 : "Coefficient for pre-emphasis compensation (usually between 0.9 and 1)",
      in unsigned short bNormalizeRMS =  0 : "Flag for activating automatic gain control",
      in unsigned short bBinauralRMS =  1 : "Flag indicating the use of unified automatic gain control over left and right channel, for preserving channel relative differences.",
      in float intTimeSecRMS =  500E-3 : "Time constant (s) for automatic gain control",
      in unsigned short bLevelScaling =  0 : "Flag to apply level scaling to the given reference",
      in float refSPLdB =  100 : "Reference dB SPL value to correspond to input signal RMS value of 1",
      in unsigned short bMiddleEarFiltering =  0 : "Flag to apply middle ear filtering",
      in string middleEarModel =  "jespen" : "Middle ear filter model (jepsen or lopezpoveda)",
      in float bUnityComp =  1 : "Compensation to have maximum of unity gain for middle ear filter (automatically true for Gammatone and false for drnl filterbanks)"
      ) {
        doc         "Prior to computing any of the supported auditory representations, the input signal can be pre-processed with one of the following elements: 1. Direct current (DC) bias removal 2. Pre-emphasis 3. Root mean square (RMS) normalization [1] 4. Level scaling to a pre-defiend sound pressure level (SPL) reference 5. Middle ear filtering [2]";
        task        preProc;
	validate    		existsAlready ( local in name, local in upperDepName, in ::ids );

        codel <start>   	startPreProc( in name, in upperDepName, in fsOut, inout preProcessorsSt, inout flagMapSt, inout newDataMapSt, in inputProcessorsSt, port out TDSPorts, in infos, /* Arguments Of processor*/ local in bRemoveDC, local in cutoffHzDC, local in bPreEmphasis, local in coefPreEmphasis, local in bNormalizeRMS, local in bBinauralRMS, local in intTimeSecRMS, local in bLevelScaling, local in refSPLdB, local in bMiddleEarFiltering, local in middleEarModel, local in bUnityComp) yield waitExec, stop;
	
	// The state Machine, start
        codel <waitExec>    	waitExec ( in name, in upperDepName, inout newDataMapSt ) yield pause::waitExec, exec, ether, delete;
        codel <exec>    	execPreProc ( in name, in upperDepName, inout preProcessorsSt, out flagMapSt ) yield waitRelease;
        codel <waitRelease>    	waitRelease ( in name, inout flagMapSt ) yield pause::waitRelease, release, stop;
        codel <release>    	releasePreProc ( in name, inout preProcessorsSt, out newDataMapSt, port out TDSPorts ) yield pause::waitExec, stop;
	// The state Machine, end

        codel <delete>    	deletePreProc( in name, inout preProcessorsSt, port out TDSPorts ) yield ether;
        codel <stop>    	stopPreProc( inout preProcessorsSt ) yield ether;

        throw   e_noUpperDependencie, e_existsAlready;
    };

    activity GammatoneProc (
      in string name = "preProc1" : "The name of this preProc",
      in string upperDepName = "input" : "The name of the upper dependencie",
      in unsigned long fsOut = 44100 : "fsOut",
      in string type =  "gammatone" : "Filterbank type (''gammatone'' or ''drnl'')",
      in float lowFreqHz =  80 : "Lowest center frequency (Hz)",
      in float highFreqHz =  80000 : "Highest center frequency (Hz)",
      in float nERBs =  1 : "Distance between neighbor filters in ERBs",
      in unsigned long nChannels =  1 : "Number of channels",
      in unsigned long cfHz =  1 : "Channels center frequencies (Hz)",
      in unsigned long nGamma =  4 : "Gammatone rising slope order",
      in float bwERBs =  1.018 : "Bandwidth of the filters (ERBs)"
      ) {
        doc         "Gammatone auditory filterbank processor. The Gammatone filterbank models the frequency selectivity of the peripheral auditory system according following [1]. It operates on a time-domain signal and returns a time-frequency representation of the signal.";
        task        gammatoneProc;
	validate    existsAlready ( local in name, local in upperDepName, in ::ids );

        codel <start>   	startGammatoneProc ( in name, in upperDepName, in fsOut, inout gammatoneProcessorsSt, inout flagMapSt, inout newDataMapSt, in preProcessorsSt, in infos, /* Arguments Of processor*/ local in type, local in lowFreqHz, local in highFreqHz, local in nERBs, local in nChannels, local in cfHz, local in nGamma, local in bwERBs ) yield waitExec, stop;
	
	// The state Machine, start
        codel <waitExec>    	waitExec ( in name, in upperDepName, inout newDataMapSt ) yield pause::waitExec, exec, ether, delete;
        codel <exec>    	execGammatoneProc ( in name, in upperDepName, inout gammatoneProcessorsSt, out flagMapSt ) yield waitRelease;
        codel <waitRelease>    	waitRelease ( in name, inout flagMapSt ) yield pause::waitRelease, release, stop;
        codel <release>    	releaseGammatoneProc ( in name, inout gammatoneProcessorsSt, out newDataMapSt ) yield pause::waitExec, stop;
	// The state Machine, end

        codel <delete>    	deleteGammatoneProc( in name, inout gammatoneProcessorsSt ) yield ether;
        codel <stop>    	stopGammatoneProc( inout gammatoneProcessorsSt ) yield ether;

        throw   e_noUpperDependencie, e_existsAlready;
    };

    function ModifyParameter (
	in string nameProc = "nameProc" : "The name of the processor to change the parameter",
	in string nameParam = "nameParam" : "The name of the parameter to be changed",
	in string newValue = "newValue" : "The new value of the parameter to be changed"
	) {
	doc         "Modifies the parameter of a processor";

	codel modifyParameter(in nameProc, in nameParam, in newValue, in inputProcessorsSt, in preProcessorsSt );

	throw e_noSuchProcessor, e_noSuchParameter;
    };

    function RemoveProcessor (
	in string name = "name" : "The name of the processor to delete"
	) {
	doc         "Removes the flags of this processor";

	codel removeProcessor(in name, inout flagMapSt, inout newDataMapSt );
    };

    function Stop() {
        doc         "Stop all";
        interrupts  InputProc, PreProc;
    };
};
