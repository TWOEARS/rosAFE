#pragma require "bass-genom3 >= 1.0"
#include "bassInterface.gen"
#include "rosAFEInterface.gen"

component rosAFE {
    version         "1.0";
    lang            "c";
    email	    "musabini@isir.upmc.fr";
    require         "genom3 >= 2.99.26";
    uses            bassInterface;
    provides        rosAFEInterface;

    native inputProcessors;
    native preProcessors;
    native gammatoneProcessors;

    native flagMap;

    ids {
	rosAFE::infos infos;

	inputProcessors inputProcessorsSt;
	preProcessors preProcessorsSt;
	gammatoneProcessors gammatoneProcessorsSt;

	flagMap flagMapSt;
	flagMap newDataMapSt;
    };

    exception e_noData, e_noMemory, e_existsAlready, e_noSuchProcessor, e_noSuchParameter, e_noUpperDependencie, e_badIndexParam;

    task init {
	codel <start> initIDS( out ::ids ) yield ether;
    };

    task input {
	period      150ms;
    };

    task preProc {
        period      50ms;
    };

    task gammatoneProc {
        period      50ms;
    };

    activity InputProc(
      in string name = "input" : "The name of this activity",
      in unsigned long nFramesPerBlock = 12000 : "Blocks size in frames",
      in unsigned long bufferSize_s = 10 : "Buffer size in seconds"
      ) {
        doc         "Get consecutive blocks of audio data from bass and normalizes that data";
        task        input;
        interrupts  InputProc;  // Only one audio input can exist simultaneously

        codel <start>   	startInputProc( local in name, local in nFramesPerBlock, local in bufferSize_s, inout inputProcessorsSt,
                            		port in Audio, out infos, port out inputProcPort ) yield waitExec;
	
	// The state Machine, start
        codel <waitExec>    	waitExecInputProc( local in nFramesPerBlock, port in Audio ) yield pause::waitExec, exec, stop;
        codel <exec>    	execInputProc( local in name, inout inputProcessorsSt ) yield waitRelease, stop;
        codel <waitRelease>    	waitReleaseInputProc( local in name, inout flagMapSt ) yield pause::waitRelease, release, stop;
        codel <release>    	releaseInputProc( local in name, inout inputProcessorsSt, out newDataMapSt, port out inputProcPort ) yield pause::waitExec, stop;
	// The state Machine, end

        codel <stop>    	stopInputProc( local in name, inout inputProcessorsSt, inout flagMapSt, inout newDataMapSt ) yield ether;

        throw   e_noData, e_noMemory, e_existsAlready;
    };

    activity PreProc (
      in string name = "preProc" : "The name of this preProc",
      in string upperDepName = "input" : "The name of the upper dependencie",
      in unsigned long fsOut = 44100 : "fsOut",
      in unsigned short pp_bRemoveDC =  0 : "'Flag to activate DC-removal filter",
      in double pp_cutoffHzDC =  20 : "Cutoff frequency (Hz) of DC-removal high-pass filter",
      in unsigned short pp_bPreEmphasis =  0 : "Flag to activate the pre-emphasis high-pass filter",
      in double pp_coefPreEmphasis =  0.97 : "Coefficient for pre-emphasis compensation (usually between 0.9 and 1)",
      in unsigned short pp_bNormalizeRMS =  0 : "Flag for activating automatic gain control",
      in double pp_intTimeSecRMS =  0.5 : "Time constant (s) for automatic gain control",
      in unsigned short pp_bLevelScaling =  0 : "Flag to apply level scaling to the given reference",
      in double pp_refSPLdB =  100 : "Reference dB SPL value to correspond to input signal RMS value of 1",
      in unsigned short pp_bMiddleEarFiltering =  0 : "Flag to apply middle ear filtering",
      in string pp_middleEarModel =  "jepsen" : "Middle ear filter model (jepsen or lopezpoveda)",
      in unsigned short pp_bUnityComp =  1 : "Compensation to have maximum of unity gain for middle ear filter (automatically true for Gammatone and false for drnl filterbanks)"
      ) {
        doc         "Prior to computing any of the supported auditory representations, the input signal can be pre-processed with one of the following elements: 1. Direct current (DC) bias removal 2. Pre-emphasis 3. Root mean square (RMS) normalization [1] 4. Level scaling to a pre-defiend sound pressure level (SPL) reference 5. Middle ear filtering [2]";
        task        		preProc;
	validate    		existsAlready ( local in name, local in upperDepName, in ::ids );

        codel <start>   	startPreProc( local in name, local in upperDepName, local in fsOut, inout preProcessorsSt, inout flagMapSt, inout newDataMapSt, inout inputProcessorsSt, in infos, port out preProcPort, /* Arguments Of processor*/ local in pp_bRemoveDC, local in pp_cutoffHzDC, local in pp_bPreEmphasis, local in pp_coefPreEmphasis, local in pp_bNormalizeRMS, local in pp_intTimeSecRMS, local in pp_bLevelScaling, local in pp_refSPLdB, local in pp_bMiddleEarFiltering, local in pp_middleEarModel, local in pp_bUnityComp ) yield waitExec, stop;
	
	// The state Machine, start
        codel <waitExec>    	waitExec ( local in name, local in upperDepName, inout newDataMapSt ) yield pause::waitExec, exec, ether, delete;
        codel <exec>    	execPreProc ( local in name, local in upperDepName, inout ::ids, out flagMapSt ) yield waitRelease;
        codel <waitRelease>    	waitRelease ( local in name, inout flagMapSt ) yield pause::waitRelease, release, stop;
        codel <release>    	releasePreProc ( local in name, inout ::ids, out newDataMapSt, port out preProcPort ) yield pause::waitExec, stop;
	// The state Machine, end

        codel <delete>    	deletePreProc( local in name, inout preProcessorsSt ) yield ether;
        codel <stop>    	stopPreProc( inout preProcessorsSt ) yield ether;

        throw   e_noUpperDependencie, e_existsAlready, e_noSuchProcessor;
    };

   function getParameters ( out rosAFE::RunningProcessorsSt parameters ) {
	doc      "Returns all parameter informations for each running processor.";

	codel    getParameters( in ::ids, out parameters );

	throw    e_noMemory;
    };

    activity GammatoneProc (
      in string name = "gammatone" : "The name of this gammatone processor",
      in string upperDepName = "preProc" : "The name of the upper dependencie",
      in unsigned long fsOut = 44100 : "fsOut",
      in string fb_type =  "gammatone" : "Filterbank type (''gammatone'' or ''drnl'')",
      in double fb_lowFreqHz =  80 : "Lowest center frequency (Hz)",
      in double fb_highFreqHz =  8000 : "Highest center frequency (Hz)",
      in double fb_nERBs =  1 : "Distance between neighbor filters in ERBs",
      in unsigned long fb_nChannels =  0 : "Number of channels",
      in sequence<double> fb_cfHz, /*: "Channels center frequencies (Hz)" */
      in unsigned long fb_nGamma =  4 : "Gammatone rising slope order",
      in double fb_bwERBs =  1.0180 : "Bandwidth of the filters (ERBs)"
      ) {
        doc         "Gammatone auditory filterbank processor. The Gammatone filterbank models the frequency selectivity of the peripheral auditory system according following [1]. It operates on a time-domain signal and returns a time-frequency representation of the signal.";
        task        gammatoneProc;
	validate    existsAlready ( local in name, local in upperDepName, in ::ids );

        codel <start>   	startGammatoneProc ( local in name, local in upperDepName, local in fsOut, inout gammatoneProcessorsSt, inout flagMapSt, inout newDataMapSt, inout preProcessorsSt, in infos, port out gammatonePort, /* Arguments Of processor*/ local in fb_type, local in fb_lowFreqHz, local in fb_highFreqHz, local in fb_nERBs, local in fb_nChannels, local in fb_cfHz, local in fb_nGamma, local in fb_bwERBs ) yield waitExec, stop;
	
	// The state Machine, start
        codel <waitExec>    	waitExec ( local in name, local in upperDepName, inout newDataMapSt ) yield pause::waitExec, exec, ether, delete;
        codel <exec>    	execGammatoneProc ( local in name, local in upperDepName, inout ::ids, out flagMapSt ) yield waitRelease;
        codel <waitRelease>    	waitRelease ( local in name, inout flagMapSt ) yield pause::waitRelease, release, stop;
        codel <release>    	releaseGammatoneProc ( local in name, inout ::ids, out newDataMapSt, port out gammatonePort ) yield pause::waitExec, stop;
	// The state Machine, end

        codel <delete>    	deleteGammatoneProc( local in name, inout gammatoneProcessorsSt ) yield ether;
        codel <stop>    	stopGammatoneProc( inout gammatoneProcessorsSt ) yield ether;

        throw   e_noUpperDependencie, e_existsAlready, e_noSuchProcessor;
    };

    function modifyParameter (
	in string nameProc = "nameProc" : "The name of the processor to change the parameter",
	in string nameParam = "nameParam" : "The name of the parameter to be changed",
	in string newValue = "newValue" : "The new value of the parameter to be changed"
	) {
	doc     "Modifies the parameter of a processor";

	codel 	modifyParameter( local in nameProc, local in nameParam, local in newValue, in ::ids );

	throw   e_noMemory, e_noSuchProcessor, e_noSuchParameter;
    };

    function removeProcessor ( in string name = "name" : "The name of the processor to delete" ) {
	doc      "Removes the flags of this processor";

	codel 	removeProcessor( local in name, inout flagMapSt, inout newDataMapSt );

	throw e_noSuchProcessor;
    };

    function Stop() {
        doc         "Stop all";
        interrupts  InputProc, PreProc, GammatoneProc/*, IhcProc, IldProc*/;
    };
};
